#!/usr/bin/env sos-runner
#vim: set filetype=python: set expandtab : ts=4:
#fileformat=SOS1.0

# This script recursively compiles all `*.md` files in the root folder via hugo
# and pushes the website to `gh-pages` branch

[global]
parameter: data_dir = './'

[theme: provides = 'website/themes/hugo-book/README.md']
parameter: version = 'master'
download: dest_dir = 'website/themes', decompress=True, expand = '${ }'
  https://github.com/alex-shpak/hugo-book/archive/refs/heads/${version}.zip
bash: expand = '${ }'
  rm -rf website/themes/hugo-book && mv website/themes/hugo-book-${version} website/themes/hugo-book
  rm -f website/themes/${version}.zip
download: dest_dir = 'website/themes/hugo-book/static/fonts', decompress=True
  https://google-webfonts-helper.herokuapp.com/api/fonts/pt-sans?download=zip&subsets=latin&variants=regular

# Download gh-pages branch
[pages: provides = 'gh-pages/.gitignore']
bash:
  rm -rf gh-pages
  git clone -b gh-pages http://github.com/gaow/genetic-analysis-software.git gh-pages

# Update alphabetic software list
[default_1]
import os, glob, re
from collections import OrderedDict
def get_meta(files):
    data = {}
    for f in files:
        if os.path.basename(f) == 'README.md':
           continue
        lines = [x.strip() for x in open(f).readlines() if x.strip()]
        if len(lines) == 0:
           continue
        data[f] = {}
        if not lines[0].startswith('#') or lines[0].startswith('##'):
            raise ValueError(f'The first line of document "{f}" must start with "#" followed by software name')
        data[f]['content'] = lines
        data[f]['name'] = lines[0][1:].strip()
        try:
          data[f]['full_name'] = lines[[x.lower() for x in lines].index('## full name') + 1]
        except:
          pass
    return OrderedDict(sorted(data.items(), key = lambda i: i[1]['name'].lower()))

meta = get_meta(glob.glob(f'{data_dir}/*.md'))
categories = []
contents = OrderedDict()
toc = OrderedDict()
idx = 1
for k in meta:
    category = '1' if re.match(r"[-+]?\d+$", meta[k]['name'][0]) is not None else meta[k]['name'][0].upper()
    if category not in categories:
       idx = 1
       categories.append(category)
       toc[category] = '\n## {}\n\n----\n\n'.format(category if category != '1' else '\\#')
    if category not in contents:
       contents[category] = OrderedDict() 
    desc_text = ', ' + meta[k]['full_name'] if 'full_name' in meta[k] else ''
    html_name = "".join(x for x in meta[k]['name'].replace(' ', '-') if x.isalnum() or x in ['-', '_', '.']).lower()
    toc[category] += '{}. [{}]({}){}\n'.format(idx, meta[k]['name'], html_name, desc_text)
    contents[category][(meta[k]['content'][0].strip("#").strip(), html_name)] = '\n'.join(meta[k]['content'][1:]).strip()
    idx += 1

idx = 4
for k in contents:
    os.makedirs(f'website/content/{k.lower()}', exist_ok=True)
    with open(f'website/content/{k.lower()}/_index.md', 'w') as f:
         f.write('+++\nweight = {}\ntitle = "{}"\n+++\n\n'.format(idx, k if k != '1' else '#'))
         f.write(toc[k])
    idx += 1
    for num, kk in enumerate(contents[k]):
        with open(f'website/content/{k.lower()}/{kk[1]}.md', 'w') as f:
             f.write('---\ntitle: {1}\ntoc: true\nweight: {0}\n---\n\n'.format(num + 1, kk[0]))
             f.write(contents[k][kk])

os.makedirs(f'website/content/0', exist_ok=True)
with open('website/content/0/_index.md', 'w') as f:
     f.write('+++\nweight = 1\ntitle = "The Rockefeller List"\n+++\n\n')
     f.write(open('Home.md').read())
with open('website/content/0/lists.md', 'w') as f:
     f.write('---\ntitle: Other lists\nweight: 2\ntoc: true\n---\n\n')
     f.write(open('Others.md').read())
 
# Update gh-pages
[default_2]
depends: 'website/themes/hugo-book/README.md', 'gh-pages/.gitignore'
bash:
  set -e
  cd website
  hugo
  rsync -auz --delete public/* ../gh-pages/
  cd ../gh-pages
  git add .
  git commit -m update
  git push

[clean]
bash: workdir='website'
  rm -rf themes resources content
